name: ci

on: [push, pull_request]

jobs:
  clang-format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install clang-format
        run: sudo apt-get update && sudo apt-get install -y clang-format
      - name: format
        run: clang-format -n --Werror $(git ls-files '*.c' '*.h')

  clang-tidy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install clang-tidy
        run: sudo apt-get update && sudo apt-get install -y clang-tidy
      - name: Generate compilation database
        run: |
          pip install compiledb
          make regenerate
          compiledb -n make host
      - name: tidy
        run: clang-tidy --allow-no-checks -p compile_commands.json $(git ls-files '*.c') -- -Iinclude

  build:
    runs-on: ubuntu-latest
    needs: [clang-format, clang-tidy]
    steps:
      - uses: actions/checkout@v4
      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y libncurses5-dev libncursesw5-dev pkg-config libcurl4-openssl-dev clang lcov
          pip install -r requirements.txt pre-commit gcovr pytest-cov
      - name: Clean gcov data
        run: find build -name '*.gcda' -delete
      - name: pre-commit
        run: pre-commit run --files $(git ls-files '*.py' '*.c' '*.h' '*.yaml')
      - name: Build all
        run: make all
      - name: Unit tests
        run: make test-unit
      - name: Branch tests
        run: make test-branch
      - name: Lifecycle tests
        run: make test-lifecycle
      - name: Integration tests
        run: make test-integration
      - name: Run Merge-AI tests
        run: make test-merge-ai
      - name: Run Lifecycle tests
        run: make test-lifecycle
      - name: Run Negative-Path tests
        run: make test-negative
      - name: Python tests with coverage
        run: pytest --cov=./ --cov-report=xml -q tests/python
      - name: NPM tests
        run: |
          cd ui
          npm install
          npm test
      - name: Playwright E2E
        run: pytest -q tests/python/test_ui_playwright.py || true
      - name: Demo smoke test
        run: make demo-test
      - name: Coverage
        run: gcovr -r . --lcov -o coverage.lcov
      - name: Upload coverage
        uses: codecov/codecov-action@v5
        with:
          files: coverage.lcov
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: RedactedCoder23/AOS

  sanitize-build:
    runs-on: ubuntu-latest
    needs: [clang-format, clang-tidy]
    steps:
      - uses: actions/checkout@v4
      - name: Install deps
        run: |
          sudo apt-get update && sudo apt-get install -y clang
          pip install -r requirements.txt pytest-cov
      - name: Clean gcov data
        run: find build -name '*.gcda' -delete
      - name: Build with sanitizers
        run: CFLAGS='-fsanitize=address,undefined -g' make host
      - name: Unit tests with sanitizers
        run: CFLAGS='-fsanitize=address,undefined -g' make test-unit
      - name: Integration tests with sanitizers
        run: CFLAGS='-fsanitize=address,undefined -g' make test-integration

  coverage:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Install Python deps
        run: pip install -r requirements.txt
      - name: Python coverage
        run: pytest --cov=. --cov-report=xml -q tests/python
      - uses: codecov/codecov-action@v5
        with:
          files: coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: RedactedCoder23/AOS
